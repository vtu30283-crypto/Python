#Python program to solve N Queen # Problem using backtrackingglobal N N = 4def printSolution(board): for i in range(N):for j in range(N):print (board[i][j],end=' ') print()def isSafe(board, row, col):# Check this row on left side for i in range(col):if board[row][i] == 1: return False# Check upper diagonal on left sidefor i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1:return False# Check lower diagonal on left sidefor i, j in zip(range(row, N, 1), range(col, -1, -1)): if board[i][j] == 1:return False return Truedef solveNQUtil(board, col):if col >= N: return Truefor i in range(N):if isSafe(board, i, col): board[i][col] = 1if solveNQUtil(board, col + 1) == True: return Trueboard[i][col] = 0 return Falsedef solveNQ():board = [ [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]]if solveNQUtil(board, 0) == False: print ("Solution does not exist") return FalseprintSolution(board) return TruesolveNQ()Output:0 0 1 01 0 0 00 0 0 10 1 0 0
