class Graph:def init (self, vertices): self.v = verticesself.graph = [[0 for column in range(vertices)] for row in range(vertices)]# A utility function to check if the current color assignment is safe for vertex v def is_safe(self, v, color, c):for i in range(self.v):if self.graph[v][i] == 1 and color[i] == c: return Falsereturn True# A recursive utility function to solve m-coloring problem def graph_color_util(self, m, color, v):if v == self.v: return Truefor c in range(1, m+1):if self.is_safe(v, color, c): color[v] = cif self.graph_color_util(m, color, v+1): return Truecolor[v] = 0def graph_coloring(self, m): color = [0] * self.vif not self.graph_color_util(m, color, 0): return False# Print the solutionprint("Solution exists and following are the assigned colors:") for c in color:print(c, end=" ")# Driver Codeif name == ' main ':g = Graph(4)g.graph = [[0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 0]]m = 3# Function call g.graph_coloring(m)
